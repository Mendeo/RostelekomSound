
RostelecomSound.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000368  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800060  00800060  000003dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000844  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000473  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000408  00000000  00000000  00001137  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f8  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043b  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	c4 c0       	rjmp	.+392    	; 0x18c <__vector_1>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__vector_3>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a7 37       	cpi	r26, 0x77	; 119
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	38 d1       	rcall	.+624    	; 0x29e <main>
  2e:	9a c1       	rjmp	.+820    	; 0x364 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <__vector_3>:
uint8_t _volumeLevel = 0;

volatile unsigned long _timer = 0; //1 us = _timer * (256 * 1E6 / F_CPU). Для нашего случая частота контроллера 9,6 МГц, Значит один инкремент переменной _timer случается примерно раз в 26,67 микросекунды.

ISR(TIM0_OVF_vect)
{
  32:	1f 92       	push	r1
  34:	0f 92       	push	r0
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	0f 92       	push	r0
  3a:	11 24       	eor	r1, r1
  3c:	8f 93       	push	r24
  3e:	9f 93       	push	r25
  40:	af 93       	push	r26
  42:	bf 93       	push	r27
	_timer++;
  44:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  48:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  4c:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  50:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  54:	01 96       	adiw	r24, 0x01	; 1
  56:	a1 1d       	adc	r26, r1
  58:	b1 1d       	adc	r27, r1
  5a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  5e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  62:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  66:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
}
  6a:	bf 91       	pop	r27
  6c:	af 91       	pop	r26
  6e:	9f 91       	pop	r25
  70:	8f 91       	pop	r24
  72:	0f 90       	pop	r0
  74:	0f be       	out	0x3f, r0	; 63
  76:	0f 90       	pop	r0
  78:	1f 90       	pop	r1
  7a:	18 95       	reti

0000007c <_Z16incrementCounterhPVh>:
	if (data & (1 << index)) return LONG_TIME;
	return SHORT_TIME;
}

bool incrementCounter(uint8_t data, volatile uint8_t *counter) //Увеличиваем счётчик, если приняли сигнал, который соответствует следующему значению в нашем паттерне (data). Если паттерн получен полностью, то возвращаем true.
{
  7c:	0f 93       	push	r16
  7e:	1f 93       	push	r17
  80:	fb 01       	movw	r30, r22
	uint8_t PIN_STATUS = !!(PORTB & (1 << INT0)); //Аналог digitalRead на ардуино.
  82:	68 b3       	in	r22, 0x18	; 24
	if ((PIN_STATUS ^ (*counter % 2)) && _pulseDuration >= getExpectedTime(data, *counter) - ERROR_VALUE && _pulseDuration <= getExpectedTime(data, *counter) + ERROR_VALUE)
  84:	90 81       	ld	r25, Z
  86:	66 fb       	bst	r22, 6
  88:	44 27       	eor	r20, r20
  8a:	40 f9       	bld	r20, 0
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	29 2f       	mov	r18, r25
  90:	21 70       	andi	r18, 0x01	; 1
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	42 17       	cp	r20, r18
  96:	53 07       	cpc	r21, r19
  98:	09 f4       	brne	.+2      	; 0x9c <_Z16incrementCounterhPVh+0x20>
  9a:	6d c0       	rjmp	.+218    	; 0x176 <__stack+0xd7>
  9c:	20 81       	ld	r18, Z
}

inline unsigned long getExpectedTime(uint8_t data, uint8_t counter) //В зависимости от значения счётчика и паттерна (data) определяем какой длительности должен быть сигнал.
{
	uint8_t index;
	if (counter >= 2 && counter <= 4)
  9e:	9e ef       	ldi	r25, 0xFE	; 254
  a0:	92 0f       	add	r25, r18
  a2:	93 30       	cpi	r25, 0x03	; 3
  a4:	40 f0       	brcs	.+16     	; 0xb6 <__stack+0x17>
	{
		index = counter - 2;
	}
	else if (counter >= 15 && counter <= 17)
  a6:	91 ef       	ldi	r25, 0xF1	; 241
  a8:	92 0f       	add	r25, r18
  aa:	93 30       	cpi	r25, 0x03	; 3
  ac:	20 f0       	brcs	.+8      	; 0xb6 <__stack+0x17>
	{
		index = counter - 15;
	}
	else if (counter >= 20 && counter <= 21)
  ae:	9c ee       	ldi	r25, 0xEC	; 236
  b0:	92 0f       	add	r25, r18
  b2:	92 30       	cpi	r25, 0x02	; 2
  b4:	70 f4       	brcc	.+28     	; 0xd2 <__stack+0x33>
	}
	else
	{
		return SHORT_TIME;
	}
	if (data & (1 << index)) return LONG_TIME;
  b6:	28 2f       	mov	r18, r24
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <__stack+0x21>
  bc:	35 95       	asr	r19
  be:	27 95       	ror	r18
  c0:	9a 95       	dec	r25
  c2:	e2 f7       	brpl	.-8      	; 0xbc <__stack+0x1d>
  c4:	20 fd       	sbrc	r18, 0
  c6:	0a c0       	rjmp	.+20     	; 0xdc <__stack+0x3d>
	return SHORT_TIME;
  c8:	40 ec       	ldi	r20, 0xC0	; 192
  ca:	5d e5       	ldi	r21, 0x5D	; 93
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	09 c0       	rjmp	.+18     	; 0xe4 <__stack+0x45>
	{
		index = counter - 20;
	}
	else
	{
		return SHORT_TIME;
  d2:	40 ec       	ldi	r20, 0xC0	; 192
  d4:	5d e5       	ldi	r21, 0x5D	; 93
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	04 c0       	rjmp	.+8      	; 0xe4 <__stack+0x45>
	}
	if (data & (1 << index)) return LONG_TIME;
  dc:	48 ec       	ldi	r20, 0xC8	; 200
  de:	5f ea       	ldi	r21, 0xAF	; 175
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	70 e0       	ldi	r23, 0x00	; 0
}

bool incrementCounter(uint8_t data, volatile uint8_t *counter) //Увеличиваем счётчик, если приняли сигнал, который соответствует следующему значению в нашем паттерне (data). Если паттерн получен полностью, то возвращаем true.
{
	uint8_t PIN_STATUS = !!(PORTB & (1 << INT0)); //Аналог digitalRead на ардуино.
	if ((PIN_STATUS ^ (*counter % 2)) && _pulseDuration >= getExpectedTime(data, *counter) - ERROR_VALUE && _pulseDuration <= getExpectedTime(data, *counter) + ERROR_VALUE)
  e4:	00 91 6f 00 	lds	r16, 0x006F	; 0x80006f <_pulseDuration>
  e8:	10 91 70 00 	lds	r17, 0x0070	; 0x800070 <_pulseDuration+0x1>
  ec:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <_pulseDuration+0x2>
  f0:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <_pulseDuration+0x3>
  f4:	45 51       	subi	r20, 0x15	; 21
  f6:	54 43       	sbci	r21, 0x34	; 52
  f8:	61 09       	sbc	r22, r1
  fa:	71 09       	sbc	r23, r1
  fc:	04 17       	cp	r16, r20
  fe:	15 07       	cpc	r17, r21
 100:	26 07       	cpc	r18, r22
 102:	37 07       	cpc	r19, r23
 104:	c0 f1       	brcs	.+112    	; 0x176 <__stack+0xd7>
 106:	90 81       	ld	r25, Z
}

inline unsigned long getExpectedTime(uint8_t data, uint8_t counter) //В зависимости от значения счётчика и паттерна (data) определяем какой длительности должен быть сигнал.
{
	uint8_t index;
	if (counter >= 2 && counter <= 4)
 108:	2e ef       	ldi	r18, 0xFE	; 254
 10a:	29 0f       	add	r18, r25
 10c:	23 30       	cpi	r18, 0x03	; 3
 10e:	40 f0       	brcs	.+16     	; 0x120 <__stack+0x81>
	{
		index = counter - 2;
	}
	else if (counter >= 15 && counter <= 17)
 110:	21 ef       	ldi	r18, 0xF1	; 241
 112:	29 0f       	add	r18, r25
 114:	23 30       	cpi	r18, 0x03	; 3
 116:	20 f0       	brcs	.+8      	; 0x120 <__stack+0x81>
	{
		index = counter - 15;
	}
	else if (counter >= 20 && counter <= 21)
 118:	2c ee       	ldi	r18, 0xEC	; 236
 11a:	29 0f       	add	r18, r25
 11c:	22 30       	cpi	r18, 0x02	; 2
 11e:	68 f4       	brcc	.+26     	; 0x13a <__stack+0x9b>
	}
	else
	{
		return SHORT_TIME;
	}
	if (data & (1 << index)) return LONG_TIME;
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <__stack+0x89>
 124:	95 95       	asr	r25
 126:	87 95       	ror	r24
 128:	2a 95       	dec	r18
 12a:	e2 f7       	brpl	.-8      	; 0x124 <__stack+0x85>
 12c:	80 fd       	sbrc	r24, 0
 12e:	0a c0       	rjmp	.+20     	; 0x144 <__stack+0xa5>
	return SHORT_TIME;
 130:	80 ec       	ldi	r24, 0xC0	; 192
 132:	9d e5       	ldi	r25, 0x5D	; 93
 134:	a0 e0       	ldi	r26, 0x00	; 0
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	09 c0       	rjmp	.+18     	; 0x14c <__stack+0xad>
	{
		index = counter - 20;
	}
	else
	{
		return SHORT_TIME;
 13a:	80 ec       	ldi	r24, 0xC0	; 192
 13c:	9d e5       	ldi	r25, 0x5D	; 93
 13e:	a0 e0       	ldi	r26, 0x00	; 0
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	04 c0       	rjmp	.+8      	; 0x14c <__stack+0xad>
	}
	if (data & (1 << index)) return LONG_TIME;
 144:	88 ec       	ldi	r24, 0xC8	; 200
 146:	9f ea       	ldi	r25, 0xAF	; 175
 148:	a0 e0       	ldi	r26, 0x00	; 0
 14a:	b0 e0       	ldi	r27, 0x00	; 0
}

bool incrementCounter(uint8_t data, volatile uint8_t *counter) //Увеличиваем счётчик, если приняли сигнал, который соответствует следующему значению в нашем паттерне (data). Если паттерн получен полностью, то возвращаем true.
{
	uint8_t PIN_STATUS = !!(PORTB & (1 << INT0)); //Аналог digitalRead на ардуино.
	if ((PIN_STATUS ^ (*counter % 2)) && _pulseDuration >= getExpectedTime(data, *counter) - ERROR_VALUE && _pulseDuration <= getExpectedTime(data, *counter) + ERROR_VALUE)
 14c:	40 91 6f 00 	lds	r20, 0x006F	; 0x80006f <_pulseDuration>
 150:	50 91 70 00 	lds	r21, 0x0070	; 0x800070 <_pulseDuration+0x1>
 154:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <_pulseDuration+0x2>
 158:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <_pulseDuration+0x3>
 15c:	8b 5e       	subi	r24, 0xEB	; 235
 15e:	9b 4c       	sbci	r25, 0xCB	; 203
 160:	af 4f       	sbci	r26, 0xFF	; 255
 162:	bf 4f       	sbci	r27, 0xFF	; 255
 164:	84 17       	cp	r24, r20
 166:	95 07       	cpc	r25, r21
 168:	a6 07       	cpc	r26, r22
 16a:	b7 07       	cpc	r27, r23
 16c:	20 f0       	brcs	.+8      	; 0x176 <__stack+0xd7>
	{
		(*counter)++;
 16e:	80 81       	ld	r24, Z
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	80 83       	st	Z, r24
 174:	01 c0       	rjmp	.+2      	; 0x178 <__stack+0xd9>
	}
	else
	{
		(*counter) = 0;
 176:	10 82       	st	Z, r1
	}
	if (*counter == SIZE_OF_DATA)
 178:	80 81       	ld	r24, Z
 17a:	87 31       	cpi	r24, 0x17	; 23
 17c:	19 f4       	brne	.+6      	; 0x184 <__stack+0xe5>
	{
		(*counter) = 0;
 17e:	10 82       	st	Z, r1
		return true;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	01 c0       	rjmp	.+2      	; 0x186 <__stack+0xe7>
	}
	return false;
 184:	80 e0       	ldi	r24, 0x00	; 0
}
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <__vector_1>:

ISR(INT0_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
	_pulseDuration = _timer - _RXPreviousTime;
 1ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1b6:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ba:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1be:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <_RXPreviousTime>
 1c2:	50 91 74 00 	lds	r21, 0x0074	; 0x800074 <_RXPreviousTime+0x1>
 1c6:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <_RXPreviousTime+0x2>
 1ca:	70 91 76 00 	lds	r23, 0x0076	; 0x800076 <_RXPreviousTime+0x3>
 1ce:	84 1b       	sub	r24, r20
 1d0:	95 0b       	sbc	r25, r21
 1d2:	a6 0b       	sbc	r26, r22
 1d4:	b7 0b       	sbc	r27, r23
 1d6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <_pulseDuration>
 1da:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <_pulseDuration+0x1>
 1de:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <_pulseDuration+0x2>
 1e2:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <_pulseDuration+0x3>
	_RXPreviousTime = _timer;
 1e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ea:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ee:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1f2:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1f6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <_RXPreviousTime>
 1fa:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <_RXPreviousTime+0x1>
 1fe:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <_RXPreviousTime+0x2>
 202:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <_RXPreviousTime+0x3>
	if (incrementCounter(UP1_DATA, &_up1Counter))
 206:	6e e6       	ldi	r22, 0x6E	; 110
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	89 e1       	ldi	r24, 0x19	; 25
 20c:	37 df       	rcall	.-402    	; 0x7c <_Z16incrementCounterhPVh>
 20e:	88 23       	and	r24, r24
 210:	21 f0       	breq	.+8      	; 0x21a <__vector_1+0x8e>
	{
		_upFire = true;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <_upFire>
 218:	31 c0       	rjmp	.+98     	; 0x27c <__vector_1+0xf0>
	}
	else if (incrementCounter(UP2_DATA, &_up2Counter))
 21a:	6d e6       	ldi	r22, 0x6D	; 109
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	8c e1       	ldi	r24, 0x1C	; 28
 220:	2d df       	rcall	.-422    	; 0x7c <_Z16incrementCounterhPVh>
 222:	88 23       	and	r24, r24
 224:	21 f0       	breq	.+8      	; 0x22e <__vector_1+0xa2>
	{
		_upFire = true;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <_upFire>
 22c:	27 c0       	rjmp	.+78     	; 0x27c <__vector_1+0xf0>
	}
	else if (incrementCounter(DOWN1_DATA, &_down1Counter))
 22e:	6c e6       	ldi	r22, 0x6C	; 108
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	8c e9       	ldi	r24, 0x9C	; 156
 234:	23 df       	rcall	.-442    	; 0x7c <_Z16incrementCounterhPVh>
 236:	88 23       	and	r24, r24
 238:	21 f0       	breq	.+8      	; 0x242 <__vector_1+0xb6>
	{
		_downFire = true;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <_downFire>
 240:	1d c0       	rjmp	.+58     	; 0x27c <__vector_1+0xf0>
	}
	else if (incrementCounter(DOWN2_DATA, &_down2Counter))
 242:	6b e6       	ldi	r22, 0x6B	; 107
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	89 e9       	ldi	r24, 0x99	; 153
 248:	19 df       	rcall	.-462    	; 0x7c <_Z16incrementCounterhPVh>
 24a:	88 23       	and	r24, r24
 24c:	21 f0       	breq	.+8      	; 0x256 <__vector_1+0xca>
	{
		_downFire = true;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <_downFire>
 254:	13 c0       	rjmp	.+38     	; 0x27c <__vector_1+0xf0>
	}
	else if (incrementCounter(MUTE_ON_DATA, &_muteOnCounter))
 256:	6a e6       	ldi	r22, 0x6A	; 106
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	84 ee       	ldi	r24, 0xE4	; 228
 25c:	0f df       	rcall	.-482    	; 0x7c <_Z16incrementCounterhPVh>
 25e:	88 23       	and	r24, r24
 260:	21 f0       	breq	.+8      	; 0x26a <__vector_1+0xde>
	{
		_muteOnFire = true;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <_muteOnFire>
 268:	09 c0       	rjmp	.+18     	; 0x27c <__vector_1+0xf0>
	}
	else if (incrementCounter(MUTE_OFF_DATA, &_muteOffCounter))
 26a:	69 e6       	ldi	r22, 0x69	; 105
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	81 ee       	ldi	r24, 0xE1	; 225
 270:	05 df       	rcall	.-502    	; 0x7c <_Z16incrementCounterhPVh>
 272:	88 23       	and	r24, r24
 274:	19 f0       	breq	.+6      	; 0x27c <__vector_1+0xf0>
	{
		_muteOffFire = true;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <_muteOffFire>
	}
}
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	bf 91       	pop	r27
 282:	af 91       	pop	r26
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	7f 91       	pop	r23
 28a:	6f 91       	pop	r22
 28c:	5f 91       	pop	r21
 28e:	4f 91       	pop	r20
 290:	3f 91       	pop	r19
 292:	2f 91       	pop	r18
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <main>:

int main(void)
{
    DDRB = (1 << LED_PIN) | (1 << SELECTOR_PIN) | (1 << CONTROL_PIN); //Включаем LED_PIN, SELECTOR_PIN и CONTROL_PIN на выход, остальные на вход.
 29e:	8d e0       	ldi	r24, 0x0D	; 13
 2a0:	87 bb       	out	0x17, r24	; 23
	GIMSK = (1 << INT0); //Настраиваем прерывание на INT0 (PB1).
 2a2:	80 e4       	ldi	r24, 0x40	; 64
 2a4:	8b bf       	out	0x3b, r24	; 59
	//Настраиваем прерывание по изменению уровня.
	MCUCR |= (1 << ISC00);
 2a6:	85 b7       	in	r24, 0x35	; 53
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC01);	
 2ac:	85 b7       	in	r24, 0x35	; 53
 2ae:	8d 7f       	andi	r24, 0xFD	; 253
 2b0:	85 bf       	out	0x35, r24	; 53
	TIMSK0 = (1 << TOIE0); //Настраиваем прерывание по переполнению регистра таймера TCNT0.
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	89 bf       	out	0x39, r24	; 57
	//Выставляем начальные значения пинов управления потенциометрами.
	PORTB &= ~(1 << SELECTOR_PIN) & ~(1 << CONTROL_PIN);
 2b6:	88 b3       	in	r24, 0x18	; 24
 2b8:	83 7f       	andi	r24, 0xF3	; 243
 2ba:	88 bb       	out	0x18, r24	; 24
	sei(); //Разрешаем прерывания.
 2bc:	78 94       	sei
	bool isMute = false;
    while (true) 
    {
		if (_upFire && !isMute)
 2be:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <_upFire>
 2c2:	88 23       	and	r24, r24
 2c4:	b9 f0       	breq	.+46     	; 0x2f4 <main+0x56>
		{
			_upFire = false;			
 2c6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <_upFire>
			PORTB |= (1 << SELECTOR_PIN);
 2ca:	c2 9a       	sbi	0x18, 2	; 24
			PORTB |= (1 << CONTROL_PIN);
 2cc:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	8f e5       	ldi	r24, 0x5F	; 95
 2d0:	99 e0       	ldi	r25, 0x09	; 9
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x34>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x3a>
 2d8:	00 00       	nop
			_delay_ms(1);
			PORTB &= ~(1 << CONTROL_PIN);
 2da:	c3 98       	cbi	0x18, 3	; 24
 2dc:	ef e5       	ldi	r30, 0x5F	; 95
 2de:	f9 e0       	ldi	r31, 0x09	; 9
 2e0:	31 97       	sbiw	r30, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <main+0x42>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x48>
 2e6:	00 00       	nop
			_delay_ms(1);
			_volumeLevel++;
 2e8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_volumeLevel>
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_volumeLevel>
 2f2:	e5 cf       	rjmp	.-54     	; 0x2be <main+0x20>
		}
		else if (_downFire && !isMute)
 2f4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <_downFire>
 2f8:	88 23       	and	r24, r24
 2fa:	b9 f0       	breq	.+46     	; 0x32a <main+0x8c>
		{
			_downFire = false;
 2fc:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <_downFire>
			PORTB &= ~(1 << SELECTOR_PIN);
 300:	c2 98       	cbi	0x18, 2	; 24
			PORTB |= (1 << CONTROL_PIN);
 302:	c3 9a       	sbi	0x18, 3	; 24
 304:	8f e5       	ldi	r24, 0x5F	; 95
 306:	99 e0       	ldi	r25, 0x09	; 9
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <main+0x6a>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0x70>
 30e:	00 00       	nop
			_delay_ms(1);
			PORTB &= ~(1 << CONTROL_PIN);
 310:	c3 98       	cbi	0x18, 3	; 24
 312:	ef e5       	ldi	r30, 0x5F	; 95
 314:	f9 e0       	ldi	r31, 0x09	; 9
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <main+0x78>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x7e>
 31c:	00 00       	nop
			_delay_ms(1);
			_volumeLevel++;
 31e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_volumeLevel>
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_volumeLevel>
 328:	ca cf       	rjmp	.-108    	; 0x2be <main+0x20>
		}
		else if (_muteOnFire && !isMute)
 32a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <_muteOnFire>
 32e:	88 23       	and	r24, r24
 330:	b1 f0       	breq	.+44     	; 0x35e <main+0xc0>
		{
			PORTB &= ~(1 << SELECTOR_PIN);
 332:	c2 98       	cbi	0x18, 2	; 24
			for (uint8_t i = _volumeLevel; i > 0; i--)
 334:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_volumeLevel>
 338:	88 23       	and	r24, r24
 33a:	09 f2       	breq	.-126    	; 0x2be <main+0x20>
			{
				PORTB |= (1 << CONTROL_PIN);
 33c:	c3 9a       	sbi	0x18, 3	; 24
 33e:	ef e5       	ldi	r30, 0x5F	; 95
 340:	f9 e0       	ldi	r31, 0x09	; 9
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <main+0xa4>
 346:	00 c0       	rjmp	.+0      	; 0x348 <main+0xaa>
 348:	00 00       	nop
				_delay_ms(1);
				PORTB &= ~(1 << CONTROL_PIN);
 34a:	c3 98       	cbi	0x18, 3	; 24
 34c:	ef e5       	ldi	r30, 0x5F	; 95
 34e:	f9 e0       	ldi	r31, 0x09	; 9
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <main+0xb2>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0xb8>
 356:	00 00       	nop
			_volumeLevel++;
		}
		else if (_muteOnFire && !isMute)
		{
			PORTB &= ~(1 << SELECTOR_PIN);
			for (uint8_t i = _volumeLevel; i > 0; i--)
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	81 f7       	brne	.-32     	; 0x33c <main+0x9e>
 35c:	b0 cf       	rjmp	.-160    	; 0x2be <main+0x20>
				_delay_ms(1);
				PORTB &= ~(1 << CONTROL_PIN);
				_delay_ms(1);
			}
		}
		else if (_muteOffFire && isMute)
 35e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <_muteOffFire>
 362:	ad cf       	rjmp	.-166    	; 0x2be <main+0x20>

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
