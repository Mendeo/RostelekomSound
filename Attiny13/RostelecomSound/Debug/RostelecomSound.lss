
RostelecomSound.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800060  00800060  0000032e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000620  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003d5  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ea  00000000  00000000  00000dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  000010bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000399  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000312  00000000  00000000  00001545  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001857  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	cd c0       	rjmp	.+410    	; 0x19e <__vector_1>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__vector_3>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a6 37       	cpi	r26, 0x76	; 118
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	36 d1       	rcall	.+620    	; 0x29a <main>
  2e:	43 c1       	rjmp	.+646    	; 0x2b6 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <__vector_3>:
volatile bool _muteOffFire = false;

volatile unsigned long _timer = 0; //1 us = _timer * (256 * 1E6 / F_CPU). Для нашего случая частота контроллера 9,6 МГц, Значит один инкремент переменной _timer случается примерно раз в 26,67 микросекунды.

ISR(TIM0_OVF_vect)
{
  32:	1f 92       	push	r1
  34:	0f 92       	push	r0
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	0f 92       	push	r0
  3a:	11 24       	eor	r1, r1
  3c:	8f 93       	push	r24
  3e:	9f 93       	push	r25
  40:	af 93       	push	r26
  42:	bf 93       	push	r27
	_timer++;
  44:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  48:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  4c:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  50:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  54:	01 96       	adiw	r24, 0x01	; 1
  56:	a1 1d       	adc	r26, r1
  58:	b1 1d       	adc	r27, r1
  5a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  5e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  62:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  66:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
}
  6a:	bf 91       	pop	r27
  6c:	af 91       	pop	r26
  6e:	9f 91       	pop	r25
  70:	8f 91       	pop	r24
  72:	0f 90       	pop	r0
  74:	0f be       	out	0x3f, r0	; 63
  76:	0f 90       	pop	r0
  78:	1f 90       	pop	r1
  7a:	18 95       	reti

0000007c <_Z15getExpectedTimehh>:

unsigned long getExpectedTime(uint8_t data, uint8_t counter) //В зависимости от значения счётчика и паттерна (data) определяем какой длительности должен быть сигнал.
{
	if (counter <= 1 || (counter >= 5 && counter <= 14) || counter == 18 || counter == 19 || counter == 22) return SHORT_TIME;
  7c:	62 30       	cpi	r22, 0x02	; 2
  7e:	08 f1       	brcs	.+66     	; 0xc2 <__stack+0x23>
  80:	9b ef       	ldi	r25, 0xFB	; 251
  82:	96 0f       	add	r25, r22
  84:	9a 30       	cpi	r25, 0x0A	; 10
  86:	10 f1       	brcs	.+68     	; 0xcc <__stack+0x2d>
  88:	9e ee       	ldi	r25, 0xEE	; 238
  8a:	96 0f       	add	r25, r22
  8c:	92 30       	cpi	r25, 0x02	; 2
  8e:	18 f1       	brcs	.+70     	; 0xd6 <__stack+0x37>
  90:	66 31       	cpi	r22, 0x16	; 22
  92:	31 f1       	breq	.+76     	; 0xe0 <__stack+0x41>
	uint8_t index;
	if (counter >= 2 && counter <= 4)
  94:	2e ef       	ldi	r18, 0xFE	; 254
  96:	26 0f       	add	r18, r22
  98:	23 30       	cpi	r18, 0x03	; 3
  9a:	30 f0       	brcs	.+12     	; 0xa8 <__stack+0x9>
	{
		index = counter - 2;
	}
	else if (counter >= 15 && counter <= 17)
  9c:	21 ef       	ldi	r18, 0xF1	; 241
  9e:	26 0f       	add	r18, r22
  a0:	23 30       	cpi	r18, 0x03	; 3
  a2:	10 f0       	brcs	.+4      	; 0xa8 <__stack+0x9>
	{
		index = counter - 15;
	}
	else
	{
		index = counter - 20;
  a4:	2c ee       	ldi	r18, 0xEC	; 236
  a6:	26 0f       	add	r18, r22
	}
	if (data & (1 << index)) return LONG_TIME;
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__stack+0x11>
  ac:	95 95       	asr	r25
  ae:	87 95       	ror	r24
  b0:	2a 95       	dec	r18
  b2:	e2 f7       	brpl	.-8      	; 0xac <__stack+0xd>
  b4:	80 fd       	sbrc	r24, 0
  b6:	19 c0       	rjmp	.+50     	; 0xea <__stack+0x4b>
	return SHORT_TIME;
  b8:	60 ec       	ldi	r22, 0xC0	; 192
  ba:	7d e5       	ldi	r23, 0x5D	; 93
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	08 95       	ret
	_timer++;
}

unsigned long getExpectedTime(uint8_t data, uint8_t counter) //В зависимости от значения счётчика и паттерна (data) определяем какой длительности должен быть сигнал.
{
	if (counter <= 1 || (counter >= 5 && counter <= 14) || counter == 18 || counter == 19 || counter == 22) return SHORT_TIME;
  c2:	60 ec       	ldi	r22, 0xC0	; 192
  c4:	7d e5       	ldi	r23, 0x5D	; 93
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	08 95       	ret
  cc:	60 ec       	ldi	r22, 0xC0	; 192
  ce:	7d e5       	ldi	r23, 0x5D	; 93
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret
  d6:	60 ec       	ldi	r22, 0xC0	; 192
  d8:	7d e5       	ldi	r23, 0x5D	; 93
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	08 95       	ret
  e0:	60 ec       	ldi	r22, 0xC0	; 192
  e2:	7d e5       	ldi	r23, 0x5D	; 93
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	08 95       	ret
	}
	else
	{
		index = counter - 20;
	}
	if (data & (1 << index)) return LONG_TIME;
  ea:	68 ec       	ldi	r22, 0xC8	; 200
  ec:	7f ea       	ldi	r23, 0xAF	; 175
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
	return SHORT_TIME;
}
  f2:	08 95       	ret

000000f4 <_Z16incrementCounterhPVh>:

bool incrementCounter(uint8_t data, volatile uint8_t *counter) //Увеличиваем счётчик, если приняли сигнал, который соответствует следующему значению в нашем паттерне (data). Если паттерн получен полностью, то возвращаем true.
{
  f4:	cf 92       	push	r12
  f6:	df 92       	push	r13
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	18 2f       	mov	r17, r24
 104:	eb 01       	movw	r28, r22
	uint8_t PIN_STATUS = !!(PORTB & (1 << INT0)); //Аналог digitalRead на ардуино.
 106:	98 b3       	in	r25, 0x18	; 24
	if ((PIN_STATUS ^ (*counter % 2)) && _pulseDuration >= getExpectedTime(data, *counter) - ERROR_VALUE && _pulseDuration <= getExpectedTime(data, *counter) + ERROR_VALUE)
 108:	88 81       	ld	r24, Y
 10a:	96 fb       	bst	r25, 6
 10c:	44 27       	eor	r20, r20
 10e:	40 f9       	bld	r20, 0
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	28 2f       	mov	r18, r24
 114:	21 70       	andi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	42 17       	cp	r20, r18
 11a:	53 07       	cpc	r21, r19
 11c:	81 f1       	breq	.+96     	; 0x17e <_Z16incrementCounterhPVh+0x8a>
 11e:	68 81       	ld	r22, Y
 120:	81 2f       	mov	r24, r17
 122:	ac df       	rcall	.-168    	; 0x7c <_Z15getExpectedTimehh>
 124:	c0 90 6e 00 	lds	r12, 0x006E	; 0x80006e <_pulseDuration>
 128:	d0 90 6f 00 	lds	r13, 0x006F	; 0x80006f <_pulseDuration+0x1>
 12c:	e0 90 70 00 	lds	r14, 0x0070	; 0x800070 <_pulseDuration+0x2>
 130:	f0 90 71 00 	lds	r15, 0x0071	; 0x800071 <_pulseDuration+0x3>
 134:	dc 01       	movw	r26, r24
 136:	cb 01       	movw	r24, r22
 138:	85 51       	subi	r24, 0x15	; 21
 13a:	94 43       	sbci	r25, 0x34	; 52
 13c:	a1 09       	sbc	r26, r1
 13e:	b1 09       	sbc	r27, r1
 140:	c8 16       	cp	r12, r24
 142:	d9 06       	cpc	r13, r25
 144:	ea 06       	cpc	r14, r26
 146:	fb 06       	cpc	r15, r27
 148:	d0 f0       	brcs	.+52     	; 0x17e <_Z16incrementCounterhPVh+0x8a>
 14a:	68 81       	ld	r22, Y
 14c:	81 2f       	mov	r24, r17
 14e:	96 df       	rcall	.-212    	; 0x7c <_Z15getExpectedTimehh>
 150:	c0 90 6e 00 	lds	r12, 0x006E	; 0x80006e <_pulseDuration>
 154:	d0 90 6f 00 	lds	r13, 0x006F	; 0x80006f <_pulseDuration+0x1>
 158:	e0 90 70 00 	lds	r14, 0x0070	; 0x800070 <_pulseDuration+0x2>
 15c:	f0 90 71 00 	lds	r15, 0x0071	; 0x800071 <_pulseDuration+0x3>
 160:	dc 01       	movw	r26, r24
 162:	cb 01       	movw	r24, r22
 164:	8b 5e       	subi	r24, 0xEB	; 235
 166:	9b 4c       	sbci	r25, 0xCB	; 203
 168:	af 4f       	sbci	r26, 0xFF	; 255
 16a:	bf 4f       	sbci	r27, 0xFF	; 255
 16c:	8c 15       	cp	r24, r12
 16e:	9d 05       	cpc	r25, r13
 170:	ae 05       	cpc	r26, r14
 172:	bf 05       	cpc	r27, r15
 174:	20 f0       	brcs	.+8      	; 0x17e <_Z16incrementCounterhPVh+0x8a>
	{
		(*counter)++;
 176:	88 81       	ld	r24, Y
 178:	8f 5f       	subi	r24, 0xFF	; 255
 17a:	88 83       	st	Y, r24
 17c:	01 c0       	rjmp	.+2      	; 0x180 <_Z16incrementCounterhPVh+0x8c>
	}
	else
	{
		(*counter) = 0;
 17e:	18 82       	st	Y, r1
	}
	if (*counter == SIZE_OF_DATA)
 180:	88 81       	ld	r24, Y
 182:	87 31       	cpi	r24, 0x17	; 23
 184:	19 f4       	brne	.+6      	; 0x18c <_Z16incrementCounterhPVh+0x98>
	{
		(*counter) = 0;
 186:	18 82       	st	Y, r1
		return true;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	01 c0       	rjmp	.+2      	; 0x18e <_Z16incrementCounterhPVh+0x9a>
	}
	return false;
 18c:	80 e0       	ldi	r24, 0x00	; 0
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	df 90       	pop	r13
 19a:	cf 90       	pop	r12
 19c:	08 95       	ret

0000019e <__vector_1>:

ISR(INT0_vect)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	_pulseDuration = _timer - _RXPreviousTime;
 1c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c8:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1cc:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1d0:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <_RXPreviousTime>
 1d4:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <_RXPreviousTime+0x1>
 1d8:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <_RXPreviousTime+0x2>
 1dc:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <_RXPreviousTime+0x3>
 1e0:	84 1b       	sub	r24, r20
 1e2:	95 0b       	sbc	r25, r21
 1e4:	a6 0b       	sbc	r26, r22
 1e6:	b7 0b       	sbc	r27, r23
 1e8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <_pulseDuration>
 1ec:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <_pulseDuration+0x1>
 1f0:	a0 93 70 00 	sts	0x0070, r26	; 0x800070 <_pulseDuration+0x2>
 1f4:	b0 93 71 00 	sts	0x0071, r27	; 0x800071 <_pulseDuration+0x3>
	_RXPreviousTime = _timer;
 1f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1fc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 200:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 204:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 208:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <_RXPreviousTime>
 20c:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <_RXPreviousTime+0x1>
 210:	a0 93 74 00 	sts	0x0074, r26	; 0x800074 <_RXPreviousTime+0x2>
 214:	b0 93 75 00 	sts	0x0075, r27	; 0x800075 <_RXPreviousTime+0x3>
	if (incrementCounter(UP1_DATA, &_up1Counter) || incrementCounter(UP2_DATA, &_up2Counter)) _upFire = true;
 218:	6d e6       	ldi	r22, 0x6D	; 109
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	89 e1       	ldi	r24, 0x19	; 25
 21e:	6a df       	rcall	.-300    	; 0xf4 <_Z16incrementCounterhPVh>
 220:	81 11       	cpse	r24, r1
 222:	06 c0       	rjmp	.+12     	; 0x230 <__vector_1+0x92>
 224:	6c e6       	ldi	r22, 0x6C	; 108
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	8c e1       	ldi	r24, 0x1C	; 28
 22a:	64 df       	rcall	.-312    	; 0xf4 <_Z16incrementCounterhPVh>
 22c:	88 23       	and	r24, r24
 22e:	19 f0       	breq	.+6      	; 0x236 <__vector_1+0x98>
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <_upFire>
	if (incrementCounter(DOWN1_DATA, &_down1Counter) || incrementCounter(DOWN2_DATA, &_down2Counter)) _downFire = true;
 236:	6b e6       	ldi	r22, 0x6B	; 107
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	8c e9       	ldi	r24, 0x9C	; 156
 23c:	5b df       	rcall	.-330    	; 0xf4 <_Z16incrementCounterhPVh>
 23e:	81 11       	cpse	r24, r1
 240:	06 c0       	rjmp	.+12     	; 0x24e <__vector_1+0xb0>
 242:	6a e6       	ldi	r22, 0x6A	; 106
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	89 e9       	ldi	r24, 0x99	; 153
 248:	55 df       	rcall	.-342    	; 0xf4 <_Z16incrementCounterhPVh>
 24a:	88 23       	and	r24, r24
 24c:	19 f0       	breq	.+6      	; 0x254 <__vector_1+0xb6>
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <_downFire>
	if (incrementCounter(MUTE_ON_DATA, &_muteOnCounter)) _muteOnFire = true;
 254:	69 e6       	ldi	r22, 0x69	; 105
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	84 ee       	ldi	r24, 0xE4	; 228
 25a:	4c df       	rcall	.-360    	; 0xf4 <_Z16incrementCounterhPVh>
 25c:	88 23       	and	r24, r24
 25e:	19 f0       	breq	.+6      	; 0x266 <__vector_1+0xc8>
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <_muteOnFire>
	if (incrementCounter(MUTE_OFF_DATA, &_muteOffCounter)) _muteOffFire = true;
 266:	68 e6       	ldi	r22, 0x68	; 104
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	81 ee       	ldi	r24, 0xE1	; 225
 26c:	43 df       	rcall	.-378    	; 0xf4 <_Z16incrementCounterhPVh>
 26e:	88 23       	and	r24, r24
 270:	19 f0       	breq	.+6      	; 0x278 <__vector_1+0xda>
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_muteOffFire>
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <main>:

int main(void)
{
    DDRB = (1 << LED_PIN) | (1 << SELECTOR_PIN) | (1 << CONTROL_PIN); //Включаем LED_PIN, SELECTOR_PIN и CONTROL_PIN на выход, остальные на вход.
 29a:	8d e0       	ldi	r24, 0x0D	; 13
 29c:	87 bb       	out	0x17, r24	; 23
	GIMSK = (1 << INT0); //Настраиваем прерывание на INT0 (PB1).
 29e:	80 e4       	ldi	r24, 0x40	; 64
 2a0:	8b bf       	out	0x3b, r24	; 59
	//Настраиваем прерывание по изменению уровня.
	MCUCR |= (1 << ISC00);
 2a2:	85 b7       	in	r24, 0x35	; 53
 2a4:	81 60       	ori	r24, 0x01	; 1
 2a6:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC01);	
 2a8:	85 b7       	in	r24, 0x35	; 53
 2aa:	8d 7f       	andi	r24, 0xFD	; 253
 2ac:	85 bf       	out	0x35, r24	; 53
	TIMSK0 = (1 << TOIE0); //Настраиваем прерывание по переполнению регистра таймера TCNT0.
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	89 bf       	out	0x39, r24	; 57
	sei(); //Разрешаем прерывания.
 2b2:	78 94       	sei
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <main+0x1a>

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
